package modules

import (
	"go.sia.tech/core/types"
	siad "go.sia.tech/siad/modules"
)

// CreditData contains the information about any running promotion.
type CreditData struct {
	Amount    float64 `json:"amount"`
	Remaining uint64  `json:"remaining"`
}

// Satellite implements the methods necessary to communicate both with the
// renters and the hosts.
type Satellite interface {
	siad.Alerter

	// ActiveHosts provides the list of hosts that the manager is selecting,
	// sorted by preference.
	ActiveHosts() ([]HostDBEntry, error)

	// AllHosts returns the full list of hosts known to the manager.
	AllHosts() ([]HostDBEntry, error)

	// Close safely shuts down the satellite.
	Close() error

	// DeleteRenter deletes the renter data from the memory.
	DeleteRenter(string)

	// EstimateHostScore will return the score for a host with the provided
	// settings, assuming perfect age and uptime adjustments.
	EstimateHostScore(HostDBEntry, Allowance) (HostScoreBreakdown, error)

	// Filter returns the hostdb's filterMode and filteredHosts.
	Filter() (FilterMode, map[string]types.PublicKey, []string, error)

	// SetFilterMode sets the hostdb's filter mode.
	SetFilterMode(FilterMode, []types.PublicKey, []string) error

	// Host provides the DB entry and score breakdown for the requested host.
	Host(types.PublicKey) (HostDBEntry, bool, error)

	// InitialScanComplete returns a boolean indicating if the initial scan of
	// the hostdb is completed.
	InitialScanComplete() (bool, uint64, error)

	// ScoreBreakdown will return the score for a host db entry using the
	// hostdb's weighting algorithm.
	ScoreBreakdown(HostDBEntry) (HostScoreBreakdown, error)

	// RandomHosts picks up to the specified number of random hosts from the
	// hostdb sorted by weight.
	RandomHosts(uint64, Allowance) ([]HostDBEntry, error)

	// PublicKey returns the satellite's public key.
	PublicKey() types.PublicKey

	// SecretKey returns the satellite's secret key.
	SecretKey() types.PrivateKey

	// FeeEstimation returns the minimum and the maximum estimated fees for
	// a transaction.
	FeeEstimation() (min, max types.Currency)

	// GetWalletSeed returns the wallet seed.
	GetWalletSeed() ([]byte, error)

	// GetRenter returns the renter by the public key.
	GetRenter(types.PublicKey) (Renter, error)

	// Renters retrieves the list of renters.
	Renters() []Renter

	// GetBalance retrieves the balance information on the account.
	GetBalance(string) (*UserBalance, error)

	// Contracts returns storage contracts.
	Contracts() []RenterContract

	// ContractsByRenter returns storage contracts filtered by the renter.
	ContractsByRenter(types.PublicKey) []RenterContract

	// RefreshedContract returns a bool indicating if the contract was refreshed.
	RefreshedContract(types.FileContractID) bool

	// OldContracts returns the contracts that have expired.
	OldContracts() []RenterContract

	// OldContractsByRenter returns expired contracts filtered by the renter.
	OldContractsByRenter(types.PublicKey) []RenterContract

	// RetrieveSpendings retrieves the user's spendings.
	RetrieveSpendings(string, string) (*UserSpendings, error)
}

// Provider implements the methods necessary to communicate with the
// renters.
type Provider interface {
	siad.Alerter

	// Close safely shuts down the provider.
	Close() error
}

// Portal implements the portal server.
type Portal interface {
	siad.Alerter

	// Close safely shuts down the portal.
	Close() error

	// GetCredits retrieves the credits data.
	GetCredits() CreditData

	// SetCredits updates the credit data.
	SetCredits(CreditData)
}

// FundLocker is the minimal interface needed to lock and unlock funds.
type FundLocker interface {
	// LockSiacoins moves a part of the balance to "locked".
	LockSiacoins(string, float64) error

	// UnlockSiacoins moves a part of the amount from "locked" to "available",
	// while the other part (fees and other spent funds) is "burned".
	UnlockSiacoins(string, float64, float64, uint64) error

	// GetBalance retrieves the balance information on the account.
	GetBalance(string) (*UserBalance, error)

	// IncrementStats increments the number of formed or renewed contracts.
	IncrementStats(string, bool) error
}

// ContractFormer is the minimal interface to be used by Provider.
type ContractFormer interface {
	PublicKey() types.PublicKey
	SecretKey() types.PrivateKey
	UserExists(types.PublicKey) (bool, error)
	FormContracts(types.PublicKey, types.PrivateKey, Allowance) ([]RenterContract, error)
	RenewContracts(types.PublicKey, types.PrivateKey, Allowance, []types.FileContractID) ([]RenterContract, error)
	UpdateContract(types.FileContractRevision, []types.TransactionSignature, types.Currency, types.Currency, types.Currency) error
	GetRenter(types.PublicKey) (Renter, error)
	ContractsByRenter(types.PublicKey) []RenterContract
	OldContractsByRenter(types.PublicKey) []RenterContract
	WalletSeed() ([]byte, error)
	RenewedFrom(types.FileContractID) types.FileContractID
	BlockHeight() uint64
	FormContract(*RPCSession, types.PublicKey, types.PublicKey, types.PublicKey, uint64, uint64, uint64, uint64, uint64, uint64) (RenterContract, error)
	RenewContract(*RPCSession, types.PublicKey, types.FileContractID, uint64, uint64, uint64, uint64, uint64, uint64) (RenterContract, error)
	UpdateRenterSettings(types.PublicKey, RenterSettings, types.PrivateKey) error
	SetAllowance(types.PublicKey, Allowance) error
}
